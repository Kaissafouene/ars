import { PrismaService } from '../prisma/prisma.service';
import { CreateClientDto } from './dto/create-client.dto';
import { UpdateClientDto } from './dto/update-client.dto';
import { SearchClientDto } from './dto/search-client.dto';
export declare class ClientService {
    private prisma;
    constructor(prisma: PrismaService);
    getComplaintsByClient(clientId: string): Promise<{
        id: string;
        department: string | null;
        createdAt: Date;
        clientId: string;
        updatedAt: Date;
        contractId: string | null;
        priority: number;
        documentId: string | null;
        bordereauId: string | null;
        type: string;
        severity: string;
        status: string;
        description: string;
        assignedToId: string | null;
        createdById: string;
        evidencePath: string | null;
        processId: string | null;
    }[]>;
    getBordereauxByClient(clientId: string): Promise<{
        id: string;
        createdAt: Date;
        clientId: string;
        delaiReglement: number;
        updatedAt: Date;
        contractId: string;
        reference: string;
        dateReception: Date;
        dateDebutScan: Date | null;
        dateFinScan: Date | null;
        dateReceptionSante: Date | null;
        dateCloture: Date | null;
        dateDepotVirement: Date | null;
        dateExecutionVirement: Date | null;
        statut: import(".prisma/client").$Enums.Statut;
        nombreBS: number;
        currentHandlerId: string | null;
        teamId: string | null;
        assignedToUserId: string | null;
        prestataireId: string | null;
        priority: number;
    }[]>;
    uploadContract(clientId: string, file: Express.Multer.File, uploadedById: string): Promise<{
        id: string;
        name: string;
        bordereauId: string | null;
        type: string;
        status: import(".prisma/client").$Enums.DocumentStatus | null;
        uploadedById: string;
        path: string;
        uploadedAt: Date;
        ocrResult: import("@prisma/client/runtime/library").JsonValue | null;
        hash: string | null;
        ocrText: string | null;
    }>;
    downloadContract(documentId: string, res: any): Promise<void>;
    updateSlaConfig(clientId: string, config: any): Promise<{
        id: string;
        createdAt: Date;
        name: string;
        reglementDelay: number;
        reclamationDelay: number;
        updatedAt: Date;
        slaConfig: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    getSlaConfig(clientId: string): Promise<import("@prisma/client/runtime/library").JsonValue>;
    getSlaStatus(clientId: string): Promise<{
        status: string;
        reason: string;
        avgSLA: number | null;
    }>;
    findAll(query: SearchClientDto, user?: any): Promise<({
        bordereaux: {
            id: string;
            createdAt: Date;
            clientId: string;
            delaiReglement: number;
            updatedAt: Date;
            contractId: string;
            reference: string;
            dateReception: Date;
            dateDebutScan: Date | null;
            dateFinScan: Date | null;
            dateReceptionSante: Date | null;
            dateCloture: Date | null;
            dateDepotVirement: Date | null;
            dateExecutionVirement: Date | null;
            statut: import(".prisma/client").$Enums.Statut;
            nombreBS: number;
            currentHandlerId: string | null;
            teamId: string | null;
            assignedToUserId: string | null;
            prestataireId: string | null;
            priority: number;
        }[];
        reclamations: {
            id: string;
            department: string | null;
            createdAt: Date;
            clientId: string;
            updatedAt: Date;
            contractId: string | null;
            priority: number;
            documentId: string | null;
            bordereauId: string | null;
            type: string;
            severity: string;
            status: string;
            description: string;
            assignedToId: string | null;
            createdById: string;
            evidencePath: string | null;
            processId: string | null;
        }[];
        gestionnaires: {
            password: string;
            id: string;
            email: string;
            fullName: string;
            role: string;
            department: string | null;
            active: boolean;
            createdAt: Date;
        }[];
        contracts: {
            id: string;
            createdAt: Date;
            clientId: string;
            clientName: string;
            delaiReglement: number;
            delaiReclamation: number;
            escalationThreshold: number | null;
            documentPath: string;
            assignedManagerId: string;
            startDate: Date;
            endDate: Date;
            signature: string | null;
            updatedAt: Date;
            version: number;
            thresholds: import("@prisma/client/runtime/library").JsonValue | null;
        }[];
    } & {
        id: string;
        createdAt: Date;
        name: string;
        reglementDelay: number;
        reclamationDelay: number;
        updatedAt: Date;
        slaConfig: import("@prisma/client/runtime/library").JsonValue | null;
    })[]>;
    reclamationSlaStats(clientId: string): Promise<{
        total: number;
        withinSla: number;
        breach: number;
    }>;
    prioritizedClients(): Promise<{
        breachCount: number;
        bordereaux: {
            id: string;
            createdAt: Date;
            clientId: string;
            delaiReglement: number;
            updatedAt: Date;
            contractId: string;
            reference: string;
            dateReception: Date;
            dateDebutScan: Date | null;
            dateFinScan: Date | null;
            dateReceptionSante: Date | null;
            dateCloture: Date | null;
            dateDepotVirement: Date | null;
            dateExecutionVirement: Date | null;
            statut: import(".prisma/client").$Enums.Statut;
            nombreBS: number;
            currentHandlerId: string | null;
            teamId: string | null;
            assignedToUserId: string | null;
            prestataireId: string | null;
            priority: number;
        }[];
        id: string;
        createdAt: Date;
        name: string;
        reglementDelay: number;
        reclamationDelay: number;
        updatedAt: Date;
        slaConfig: import("@prisma/client/runtime/library").JsonValue | null;
    }[]>;
    autofillData(clientId: string): Promise<{
        gestionnaires: {
            password: string;
            id: string;
            email: string;
            fullName: string;
            role: string;
            department: string | null;
            active: boolean;
            createdAt: Date;
        }[];
        contracts: {
            id: string;
            createdAt: Date;
            clientId: string;
            clientName: string;
            delaiReglement: number;
            delaiReclamation: number;
            escalationThreshold: number | null;
            documentPath: string;
            assignedManagerId: string;
            startDate: Date;
            endDate: Date;
            signature: string | null;
            updatedAt: Date;
            version: number;
            thresholds: import("@prisma/client/runtime/library").JsonValue | null;
        }[];
    } & {
        id: string;
        createdAt: Date;
        name: string;
        reglementDelay: number;
        reclamationDelay: number;
        updatedAt: Date;
        slaConfig: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    handleArsWebhook(payload: any): Promise<void>;
    syncWithExternal(id: string): Promise<{
        id: string;
        createdAt: Date;
        name: string;
        reglementDelay: number;
        reclamationDelay: number;
        updatedAt: Date;
        slaConfig: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    getAIRecommendation(id: string): Promise<{
        recommendation: string;
    }>;
    exportToExcel(query: SearchClientDto): Promise<Buffer>;
    exportToPDF(query: SearchClientDto): Promise<Buffer>;
    findByName(name: string): Promise<{
        id: string;
        createdAt: Date;
        name: string;
        reglementDelay: number;
        reclamationDelay: number;
        updatedAt: Date;
        slaConfig: import("@prisma/client/runtime/library").JsonValue | null;
    } | null>;
    create(dto: CreateClientDto): Promise<{
        gestionnaires: {
            password: string;
            id: string;
            email: string;
            fullName: string;
            role: string;
            department: string | null;
            active: boolean;
            createdAt: Date;
        }[];
    } & {
        id: string;
        createdAt: Date;
        name: string;
        reglementDelay: number;
        reclamationDelay: number;
        updatedAt: Date;
        slaConfig: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    findOne(id: string): Promise<{
        bordereaux: {
            id: string;
            createdAt: Date;
            clientId: string;
            delaiReglement: number;
            updatedAt: Date;
            contractId: string;
            reference: string;
            dateReception: Date;
            dateDebutScan: Date | null;
            dateFinScan: Date | null;
            dateReceptionSante: Date | null;
            dateCloture: Date | null;
            dateDepotVirement: Date | null;
            dateExecutionVirement: Date | null;
            statut: import(".prisma/client").$Enums.Statut;
            nombreBS: number;
            currentHandlerId: string | null;
            teamId: string | null;
            assignedToUserId: string | null;
            prestataireId: string | null;
            priority: number;
        }[];
        reclamations: {
            id: string;
            department: string | null;
            createdAt: Date;
            clientId: string;
            updatedAt: Date;
            contractId: string | null;
            priority: number;
            documentId: string | null;
            bordereauId: string | null;
            type: string;
            severity: string;
            status: string;
            description: string;
            assignedToId: string | null;
            createdById: string;
            evidencePath: string | null;
            processId: string | null;
        }[];
        gestionnaires: {
            password: string;
            id: string;
            email: string;
            fullName: string;
            role: string;
            department: string | null;
            active: boolean;
            createdAt: Date;
        }[];
        contracts: {
            id: string;
            createdAt: Date;
            clientId: string;
            clientName: string;
            delaiReglement: number;
            delaiReclamation: number;
            escalationThreshold: number | null;
            documentPath: string;
            assignedManagerId: string;
            startDate: Date;
            endDate: Date;
            signature: string | null;
            updatedAt: Date;
            version: number;
            thresholds: import("@prisma/client/runtime/library").JsonValue | null;
        }[];
    } & {
        id: string;
        createdAt: Date;
        name: string;
        reglementDelay: number;
        reclamationDelay: number;
        updatedAt: Date;
        slaConfig: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    update(id: string, dto: UpdateClientDto): Promise<{
        gestionnaires: {
            password: string;
            id: string;
            email: string;
            fullName: string;
            role: string;
            department: string | null;
            active: boolean;
            createdAt: Date;
        }[];
    } & {
        id: string;
        createdAt: Date;
        name: string;
        reglementDelay: number;
        reclamationDelay: number;
        updatedAt: Date;
        slaConfig: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    remove(id: string): Promise<{
        id: string;
        createdAt: Date;
        name: string;
        reglementDelay: number;
        reclamationDelay: number;
        updatedAt: Date;
        slaConfig: import("@prisma/client/runtime/library").JsonValue | null;
    }>;
    getHistory(id: string): Promise<{
        contracts: {
            id: string;
            createdAt: Date;
            clientId: string;
            clientName: string;
            delaiReglement: number;
            delaiReclamation: number;
            escalationThreshold: number | null;
            documentPath: string;
            assignedManagerId: string;
            startDate: Date;
            endDate: Date;
            signature: string | null;
            updatedAt: Date;
            version: number;
            thresholds: import("@prisma/client/runtime/library").JsonValue | null;
        }[];
        bordereaux: {
            id: string;
            createdAt: Date;
            clientId: string;
            delaiReglement: number;
            updatedAt: Date;
            contractId: string;
            reference: string;
            dateReception: Date;
            dateDebutScan: Date | null;
            dateFinScan: Date | null;
            dateReceptionSante: Date | null;
            dateCloture: Date | null;
            dateDepotVirement: Date | null;
            dateExecutionVirement: Date | null;
            statut: import(".prisma/client").$Enums.Statut;
            nombreBS: number;
            currentHandlerId: string | null;
            teamId: string | null;
            assignedToUserId: string | null;
            prestataireId: string | null;
            priority: number;
        }[];
        reclamations: {
            id: string;
            department: string | null;
            createdAt: Date;
            clientId: string;
            updatedAt: Date;
            contractId: string | null;
            priority: number;
            documentId: string | null;
            bordereauId: string | null;
            type: string;
            severity: string;
            status: string;
            description: string;
            assignedToId: string | null;
            createdById: string;
            evidencePath: string | null;
            processId: string | null;
        }[];
    }>;
    analytics(id: string): Promise<{
        bordereauxCount: number;
        reclamationsCount: number;
        avgSLA: number | null;
        reglementDelay: number | undefined;
    }>;
    analyticsTrends(id: string): Promise<{
        monthlyBordereaux: {
            year: number;
            month: number;
            count: number;
        }[];
    }>;
}
