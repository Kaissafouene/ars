import { PrismaService } from '../prisma/prisma.service';
import { CreateCourrierDto } from './dto/create-courrier.dto';
import { SearchCourrierDto } from './dto/search-courrier.dto';
import { UpdateCourrierStatusDto } from './dto/update-courrier-status.dto';
import { SendCourrierDto } from './dto/send-courrier.dto';
import { GedService } from '../ged/ged.service';
import { OutlookService } from '../integrations/outlook.service';
import { TemplateService } from './template.service';
export declare class GecService {
    private prisma;
    private gedService;
    private outlookService;
    private templateService;
    private readonly logger;
    constructor(prisma: PrismaService, gedService: GedService, outlookService: OutlookService, templateService: TemplateService);
    createCourrier(dto: CreateCourrierDto, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        bordereauId: string | null;
        type: import(".prisma/client").$Enums.CourrierType;
        status: import(".prisma/client").$Enums.CourrierStatus;
        subject: string;
        body: string;
        templateUsed: string;
        sentAt: Date | null;
        responseAt: Date | null;
        uploadedById: string;
    }>;
    sendCourrier(id: string, dto: SendCourrierDto, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        bordereauId: string | null;
        type: import(".prisma/client").$Enums.CourrierType;
        status: import(".prisma/client").$Enums.CourrierStatus;
        subject: string;
        body: string;
        templateUsed: string;
        sentAt: Date | null;
        responseAt: Date | null;
        uploadedById: string;
    }>;
    searchCourriers(query: SearchCourrierDto, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        bordereauId: string | null;
        type: import(".prisma/client").$Enums.CourrierType;
        status: import(".prisma/client").$Enums.CourrierStatus;
        subject: string;
        body: string;
        templateUsed: string;
        sentAt: Date | null;
        responseAt: Date | null;
        uploadedById: string;
    }[]>;
    getCourrierById(id: string, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        bordereauId: string | null;
        type: import(".prisma/client").$Enums.CourrierType;
        status: import(".prisma/client").$Enums.CourrierStatus;
        subject: string;
        body: string;
        templateUsed: string;
        sentAt: Date | null;
        responseAt: Date | null;
        uploadedById: string;
    }>;
    updateCourrierStatus(id: string, dto: UpdateCourrierStatusDto, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        bordereauId: string | null;
        type: import(".prisma/client").$Enums.CourrierType;
        status: import(".prisma/client").$Enums.CourrierStatus;
        subject: string;
        body: string;
        templateUsed: string;
        sentAt: Date | null;
        responseAt: Date | null;
        uploadedById: string;
    }>;
    deleteCourrier(id: string, user: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        bordereauId: string | null;
        type: import(".prisma/client").$Enums.CourrierType;
        status: import(".prisma/client").$Enums.CourrierStatus;
        subject: string;
        body: string;
        templateUsed: string;
        sentAt: Date | null;
        responseAt: Date | null;
        uploadedById: string;
    }>;
    renderTemplate(body: string, variables: Record<string, string>): string;
    triggerRelances(): Promise<number>;
    notify(type: string, message: string, email?: string): Promise<void>;
}
