import { BulletinSoinService } from './bulletin-soin.service';
import { CreateBulletinSoinDto } from './dto/create-bulletin-soin.dto';
import { UpdateBulletinSoinDto } from './dto/update-bulletin-soin.dto';
import { AssignBulletinSoinDto } from './dto/assign-bulletin-soin.dto';
import { ExpertiseInfoDto } from './dto/expertise-info.dto';
import { BsLogDto } from './dto/bs-log.dto';
import { BsQueryDto } from './dto/bs-query.dto';
import { ReconciliationReport } from './reconciliation.types';
export declare class BulletinSoinController {
    private readonly bsService;
    constructor(bsService: BulletinSoinService);
    notifySla(): Promise<void>;
    notifyAssignment(body: {
        bsId: string;
        userId: string;
    }): Promise<void>;
    notifyOverload(body: {
        gestionnaireId: string;
        riskLevel: 'HIGH' | 'MEDIUM' | 'LOW';
    }): Promise<void>;
    exportExcel(): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        priority: number;
        bordereauId: string;
        ownerId: string | null;
        processedAt: Date | null;
        nomPrestation: string;
        nomBordereau: string;
        lien: string;
        dateCreation: Date;
        dateMaladie: Date;
        totalPec: number;
        observationGlobal: string;
        montant: number | null;
        ocrText: string | null;
        numBs: string;
        codeAssure: string;
        nomAssure: string;
        nomBeneficiaire: string;
        nomSociete: string;
        etat: string;
        matricule: string | null;
        dateSoin: Date | null;
        acte: string | null;
        processedById: string | null;
        dueDate: Date | null;
        virementId: string | null;
        deletedAt: Date | null;
    }[]>;
    analyseCharge(): Promise<{
        id: string;
        fullName: string;
        inProgress: number;
        risk: "HIGH" | "MEDIUM" | "LOW";
    }[]>;
    getBsWithReclamations(): Promise<{
        reclamations: {
            id: string;
            department: string | null;
            createdAt: Date;
            clientId: string;
            updatedAt: Date;
            contractId: string | null;
            priority: number;
            documentId: string | null;
            bordereauId: string | null;
            type: string;
            severity: string;
            status: string;
            description: string;
            assignedToId: string | null;
            createdById: string;
            evidencePath: string | null;
            processId: string | null;
        }[];
        id: string;
        createdAt: Date;
        updatedAt: Date;
        priority: number;
        bordereauId: string;
        ownerId: string | null;
        processedAt: Date | null;
        nomPrestation: string;
        nomBordereau: string;
        lien: string;
        dateCreation: Date;
        dateMaladie: Date;
        totalPec: number;
        observationGlobal: string;
        montant: number | null;
        ocrText: string | null;
        numBs: string;
        codeAssure: string;
        nomAssure: string;
        nomBeneficiaire: string;
        nomSociete: string;
        etat: string;
        matricule: string | null;
        dateSoin: Date | null;
        acte: string | null;
        processedById: string | null;
        dueDate: Date | null;
        virementId: string | null;
        deletedAt: Date | null;
    }[]>;
    calculateDueDate(dateCreation: string, contractId?: string): Promise<Date>;
    suggestRebalancing(): Promise<{
        bsId: string;
        from: string;
        to: string;
    }[]>;
    estimateEscalationRisk(bsId: string): Promise<{
        risk: string;
    }>;
    suggestAssignment(): Promise<{
        id: string;
        fullName: string;
        inProgress: number;
        overdue: number;
        avgProcessingHours: number | null;
        score: number;
    }[]>;
    suggestPriorities(gestionnaireId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        priority: number;
        bordereauId: string;
        ownerId: string | null;
        processedAt: Date | null;
        nomPrestation: string;
        nomBordereau: string;
        lien: string;
        dateCreation: Date;
        dateMaladie: Date;
        totalPec: number;
        observationGlobal: string;
        montant: number | null;
        ocrText: string | null;
        numBs: string;
        codeAssure: string;
        nomAssure: string;
        nomBeneficiaire: string;
        nomSociete: string;
        etat: string;
        matricule: string | null;
        dateSoin: Date | null;
        acte: string | null;
        processedById: string | null;
        dueDate: Date | null;
        virementId: string | null;
        deletedAt: Date | null;
    }[]>;
    reconcilePayments(): Promise<ReconciliationReport>;
    getPaymentStatus(id: string): Promise<{
        status: string;
        virement: null;
    } | {
        status: string;
        virement: {
            id: string;
            createdAt: Date;
            priority: number;
            bordereauId: string;
            montant: number;
            referenceBancaire: string;
            dateDepot: Date;
            dateExecution: Date;
            confirmed: boolean;
            confirmedById: string | null;
            confirmedAt: Date | null;
        };
    }>;
    getBsForVirement(virementId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        priority: number;
        bordereauId: string;
        ownerId: string | null;
        processedAt: Date | null;
        nomPrestation: string;
        nomBordereau: string;
        lien: string;
        dateCreation: Date;
        dateMaladie: Date;
        totalPec: number;
        observationGlobal: string;
        montant: number | null;
        ocrText: string | null;
        numBs: string;
        codeAssure: string;
        nomAssure: string;
        nomBeneficiaire: string;
        nomSociete: string;
        etat: string;
        matricule: string | null;
        dateSoin: Date | null;
        acte: string | null;
        processedById: string | null;
        dueDate: Date | null;
        virementId: string | null;
        deletedAt: Date | null;
    }[]>;
    markBsAsPaid(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        priority: number;
        bordereauId: string;
        ownerId: string | null;
        processedAt: Date | null;
        nomPrestation: string;
        nomBordereau: string;
        lien: string;
        dateCreation: Date;
        dateMaladie: Date;
        totalPec: number;
        observationGlobal: string;
        montant: number | null;
        ocrText: string | null;
        numBs: string;
        codeAssure: string;
        nomAssure: string;
        nomBeneficiaire: string;
        nomSociete: string;
        etat: string;
        matricule: string | null;
        dateSoin: Date | null;
        acte: string | null;
        processedById: string | null;
        dueDate: Date | null;
        virementId: string | null;
        deletedAt: Date | null;
    }>;
    findAll(query: BsQueryDto, req: any): Promise<{
        items: ({
            items: {
                id: string;
                message: string;
                bulletinSoinId: string;
                nomProduit: string;
                quantite: number;
                commentaire: string;
                nomChapitre: string;
                nomPrestataire: string;
                datePrestation: Date;
                typeHonoraire: string;
                depense: number;
                pec: number;
                participationAdherent: number;
                codeMessage: string;
                acuiteDroite: number;
                acuiteGauche: number;
                nombreCle: string;
                nbJourDepassement: number;
            }[];
            expertises: {
                id: string;
                contrat: string;
                bulletinSoinId: string;
                isFavorable: string;
                matriculeAdherent: string;
                numBS: string;
                cin: string;
                vlodsphere: number | null;
                vpogsphere: number | null;
                prixMonture: number | null;
                codification: string | null;
                natureActe: string | null;
                societe: string | null;
                dents: string | null;
            }[];
            logs: {
                id: string;
                userId: string;
                action: string;
                bsId: string;
                timestamp: Date;
            }[];
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            priority: number;
            bordereauId: string;
            ownerId: string | null;
            processedAt: Date | null;
            nomPrestation: string;
            nomBordereau: string;
            lien: string;
            dateCreation: Date;
            dateMaladie: Date;
            totalPec: number;
            observationGlobal: string;
            montant: number | null;
            ocrText: string | null;
            numBs: string;
            codeAssure: string;
            nomAssure: string;
            nomBeneficiaire: string;
            nomSociete: string;
            etat: string;
            matricule: string | null;
            dateSoin: Date | null;
            acte: string | null;
            processedById: string | null;
            dueDate: Date | null;
            virementId: string | null;
            deletedAt: Date | null;
        })[];
        total: number;
        page: number;
        limit: number;
        totalPages: number;
    }>;
    getSlaAlerts(): Promise<{
        overdue: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            priority: number;
            bordereauId: string;
            ownerId: string | null;
            processedAt: Date | null;
            nomPrestation: string;
            nomBordereau: string;
            lien: string;
            dateCreation: Date;
            dateMaladie: Date;
            totalPec: number;
            observationGlobal: string;
            montant: number | null;
            ocrText: string | null;
            numBs: string;
            codeAssure: string;
            nomAssure: string;
            nomBeneficiaire: string;
            nomSociete: string;
            etat: string;
            matricule: string | null;
            dateSoin: Date | null;
            acte: string | null;
            processedById: string | null;
            dueDate: Date | null;
            virementId: string | null;
            deletedAt: Date | null;
        }[];
        approaching: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            priority: number;
            bordereauId: string;
            ownerId: string | null;
            processedAt: Date | null;
            nomPrestation: string;
            nomBordereau: string;
            lien: string;
            dateCreation: Date;
            dateMaladie: Date;
            totalPec: number;
            observationGlobal: string;
            montant: number | null;
            ocrText: string | null;
            numBs: string;
            codeAssure: string;
            nomAssure: string;
            nomBeneficiaire: string;
            nomSociete: string;
            etat: string;
            matricule: string | null;
            dateSoin: Date | null;
            acte: string | null;
            processedById: string | null;
            dueDate: Date | null;
            virementId: string | null;
            deletedAt: Date | null;
        }[];
    }>;
    getPerformanceMetrics(start: string, end: string): Promise<(import(".prisma/client").Prisma.PickEnumerable<import(".prisma/client").Prisma.BulletinSoinGroupByOutputType, "processedById"[]> & {
        _count: {
            id: number;
        };
    })[]>;
    findOne(id: string, req: any): Promise<{
        items: {
            id: string;
            message: string;
            bulletinSoinId: string;
            nomProduit: string;
            quantite: number;
            commentaire: string;
            nomChapitre: string;
            nomPrestataire: string;
            datePrestation: Date;
            typeHonoraire: string;
            depense: number;
            pec: number;
            participationAdherent: number;
            codeMessage: string;
            acuiteDroite: number;
            acuiteGauche: number;
            nombreCle: string;
            nbJourDepassement: number;
        }[];
        expertises: {
            id: string;
            contrat: string;
            bulletinSoinId: string;
            isFavorable: string;
            matriculeAdherent: string;
            numBS: string;
            cin: string;
            vlodsphere: number | null;
            vpogsphere: number | null;
            prixMonture: number | null;
            codification: string | null;
            natureActe: string | null;
            societe: string | null;
            dents: string | null;
        }[];
        logs: {
            id: string;
            userId: string;
            action: string;
            bsId: string;
            timestamp: Date;
        }[];
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        priority: number;
        bordereauId: string;
        ownerId: string | null;
        processedAt: Date | null;
        nomPrestation: string;
        nomBordereau: string;
        lien: string;
        dateCreation: Date;
        dateMaladie: Date;
        totalPec: number;
        observationGlobal: string;
        montant: number | null;
        ocrText: string | null;
        numBs: string;
        codeAssure: string;
        nomAssure: string;
        nomBeneficiaire: string;
        nomSociete: string;
        etat: string;
        matricule: string | null;
        dateSoin: Date | null;
        acte: string | null;
        processedById: string | null;
        dueDate: Date | null;
        virementId: string | null;
        deletedAt: Date | null;
    }>;
    create(dto: CreateBulletinSoinDto, req: any): Promise<{
        items: {
            id: string;
            message: string;
            bulletinSoinId: string;
            nomProduit: string;
            quantite: number;
            commentaire: string;
            nomChapitre: string;
            nomPrestataire: string;
            datePrestation: Date;
            typeHonoraire: string;
            depense: number;
            pec: number;
            participationAdherent: number;
            codeMessage: string;
            acuiteDroite: number;
            acuiteGauche: number;
            nombreCle: string;
            nbJourDepassement: number;
        }[];
        expertises: {
            id: string;
            contrat: string;
            bulletinSoinId: string;
            isFavorable: string;
            matriculeAdherent: string;
            numBS: string;
            cin: string;
            vlodsphere: number | null;
            vpogsphere: number | null;
            prixMonture: number | null;
            codification: string | null;
            natureActe: string | null;
            societe: string | null;
            dents: string | null;
        }[];
        logs: {
            id: string;
            userId: string;
            action: string;
            bsId: string;
            timestamp: Date;
        }[];
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        priority: number;
        bordereauId: string;
        ownerId: string | null;
        processedAt: Date | null;
        nomPrestation: string;
        nomBordereau: string;
        lien: string;
        dateCreation: Date;
        dateMaladie: Date;
        totalPec: number;
        observationGlobal: string;
        montant: number | null;
        ocrText: string | null;
        numBs: string;
        codeAssure: string;
        nomAssure: string;
        nomBeneficiaire: string;
        nomSociete: string;
        etat: string;
        matricule: string | null;
        dateSoin: Date | null;
        acte: string | null;
        processedById: string | null;
        dueDate: Date | null;
        virementId: string | null;
        deletedAt: Date | null;
    }>;
    update(id: string, dto: UpdateBulletinSoinDto, req: any): Promise<{
        items: {
            id: string;
            message: string;
            bulletinSoinId: string;
            nomProduit: string;
            quantite: number;
            commentaire: string;
            nomChapitre: string;
            nomPrestataire: string;
            datePrestation: Date;
            typeHonoraire: string;
            depense: number;
            pec: number;
            participationAdherent: number;
            codeMessage: string;
            acuiteDroite: number;
            acuiteGauche: number;
            nombreCle: string;
            nbJourDepassement: number;
        }[];
        expertises: {
            id: string;
            contrat: string;
            bulletinSoinId: string;
            isFavorable: string;
            matriculeAdherent: string;
            numBS: string;
            cin: string;
            vlodsphere: number | null;
            vpogsphere: number | null;
            prixMonture: number | null;
            codification: string | null;
            natureActe: string | null;
            societe: string | null;
            dents: string | null;
        }[];
        logs: {
            id: string;
            userId: string;
            action: string;
            bsId: string;
            timestamp: Date;
        }[];
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        priority: number;
        bordereauId: string;
        ownerId: string | null;
        processedAt: Date | null;
        nomPrestation: string;
        nomBordereau: string;
        lien: string;
        dateCreation: Date;
        dateMaladie: Date;
        totalPec: number;
        observationGlobal: string;
        montant: number | null;
        ocrText: string | null;
        numBs: string;
        codeAssure: string;
        nomAssure: string;
        nomBeneficiaire: string;
        nomSociete: string;
        etat: string;
        matricule: string | null;
        dateSoin: Date | null;
        acte: string | null;
        processedById: string | null;
        dueDate: Date | null;
        virementId: string | null;
        deletedAt: Date | null;
    }>;
    remove(id: string, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        priority: number;
        bordereauId: string;
        ownerId: string | null;
        processedAt: Date | null;
        nomPrestation: string;
        nomBordereau: string;
        lien: string;
        dateCreation: Date;
        dateMaladie: Date;
        totalPec: number;
        observationGlobal: string;
        montant: number | null;
        ocrText: string | null;
        numBs: string;
        codeAssure: string;
        nomAssure: string;
        nomBeneficiaire: string;
        nomSociete: string;
        etat: string;
        matricule: string | null;
        dateSoin: Date | null;
        acte: string | null;
        processedById: string | null;
        dueDate: Date | null;
        virementId: string | null;
        deletedAt: Date | null;
    }>;
    assign(id: string, dto: AssignBulletinSoinDto, req: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        priority: number;
        bordereauId: string;
        ownerId: string | null;
        processedAt: Date | null;
        nomPrestation: string;
        nomBordereau: string;
        lien: string;
        dateCreation: Date;
        dateMaladie: Date;
        totalPec: number;
        observationGlobal: string;
        montant: number | null;
        ocrText: string | null;
        numBs: string;
        codeAssure: string;
        nomAssure: string;
        nomBeneficiaire: string;
        nomSociete: string;
        etat: string;
        matricule: string | null;
        dateSoin: Date | null;
        acte: string | null;
        processedById: string | null;
        dueDate: Date | null;
        virementId: string | null;
        deletedAt: Date | null;
    }>;
    getOcr(id: string, req: any): Promise<{
        ocrText: string;
    }>;
    getExpertise(id: string, req: any): Promise<{
        id: string;
        contrat: string;
        bulletinSoinId: string;
        isFavorable: string;
        matriculeAdherent: string;
        numBS: string;
        cin: string;
        vlodsphere: number | null;
        vpogsphere: number | null;
        prixMonture: number | null;
        codification: string | null;
        natureActe: string | null;
        societe: string | null;
        dents: string | null;
    }[]>;
    updateExpertise(id: string, dto: ExpertiseInfoDto, req: any): Promise<{
        id: string;
        contrat: string;
        bulletinSoinId: string;
        isFavorable: string;
        matriculeAdherent: string;
        numBS: string;
        cin: string;
        vlodsphere: number | null;
        vpogsphere: number | null;
        prixMonture: number | null;
        codification: string | null;
        natureActe: string | null;
        societe: string | null;
        dents: string | null;
    }>;
    getLogs(id: string, req: any): Promise<{
        id: string;
        userId: string;
        action: string;
        bsId: string;
        timestamp: Date;
    }[]>;
    addLog(id: string, dto: BsLogDto, req: any): Promise<{
        id: string;
        userId: string;
        action: string;
        bsId: string;
        timestamp: Date;
    }>;
}
