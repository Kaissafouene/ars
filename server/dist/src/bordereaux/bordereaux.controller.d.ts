import { BordereauxService } from './bordereaux.service';
import { CreateBordereauDto } from './dto/create-bordereau.dto';
import { UpdateBordereauDto } from './dto/update-bordereau.dto';
import { AssignBordereauDto } from './dto/assign-bordereau.dto';
import { BordereauResponseDto } from './dto/bordereau-response.dto';
import { BordereauKPI } from './interfaces/kpi.interface';
import { CreateBSDto } from './dto/bs.dto';
import { AuditLogService } from './audit-log.service';
import { UpdateBulletinSoinDto } from '../bulletin-soin/dto/update-bulletin-soin.dto';
export declare class BordereauxController {
    private readonly bordereauxService;
    private readonly auditLogService;
    contractsService: any;
    constructor(bordereauxService: BordereauxService, auditLogService: AuditLogService);
    create(createBordereauDto: CreateBordereauDto): Promise<BordereauResponseDto>;
    getAuditLog(id: string): Promise<{
        id: string;
        createdAt: Date;
        bordereauId: string;
        userId: string | null;
        action: string;
        details: string | null;
    }[]>;
    updateThresholds(id: string, thresholds: any): any;
    exportCSV(): Promise<string>;
    exportExcel(): Promise<Buffer<ArrayBuffer>>;
    exportPDF(): Promise<Buffer<ArrayBuffer>>;
    getUnassignedBordereaux(): Promise<BordereauResponseDto[]>;
    getTeamBordereaux(teamId: string): Promise<BordereauResponseDto[]>;
    getUserBordereaux(userId: string): Promise<BordereauResponseDto[]>;
    returnBordereau(id: string, reason: string): Promise<BordereauResponseDto>;
    findAll(): Promise<BordereauResponseDto[]>;
    getApproachingDeadlines(): Promise<BordereauResponseDto[]>;
    getOverdueBordereaux(): Promise<BordereauResponseDto[]>;
    getBordereauKPIs(): Promise<BordereauKPI[]>;
    findOne(id: string): Promise<BordereauResponseDto>;
    update(id: string, updateBordereauDto: UpdateBordereauDto): Promise<BordereauResponseDto>;
    remove(id: string): Promise<BordereauResponseDto>;
    assignBordereau(assignDto: AssignBordereauDto): Promise<BordereauResponseDto>;
    startScan(id: string): Promise<BordereauResponseDto>;
    completeScan(id: string): Promise<BordereauResponseDto>;
    markAsProcessed(id: string): Promise<BordereauResponseDto>;
    closeBordereau(id: string): Promise<BordereauResponseDto>;
    getBSList(id: string): Promise<({
        owner: {
            password: string;
            id: string;
            email: string;
            fullName: string;
            role: string;
            department: string | null;
            active: boolean;
            createdAt: Date;
        } | null;
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        priority: number;
        bordereauId: string;
        ownerId: string | null;
        processedAt: Date | null;
        nomPrestation: string;
        nomBordereau: string;
        lien: string;
        dateCreation: Date;
        dateMaladie: Date;
        totalPec: number;
        observationGlobal: string;
        montant: number | null;
        ocrText: string | null;
        numBs: string;
        codeAssure: string;
        nomAssure: string;
        nomBeneficiaire: string;
        nomSociete: string;
        etat: string;
        matricule: string | null;
        dateSoin: Date | null;
        acte: string | null;
        processedById: string | null;
        dueDate: Date | null;
        virementId: string | null;
        deletedAt: Date | null;
    })[]>;
    createBS(id: string, createBSDto: CreateBSDto): Promise<{
        owner: {
            password: string;
            id: string;
            email: string;
            fullName: string;
            role: string;
            department: string | null;
            active: boolean;
            createdAt: Date;
        } | null;
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        priority: number;
        bordereauId: string;
        ownerId: string | null;
        processedAt: Date | null;
        nomPrestation: string;
        nomBordereau: string;
        lien: string;
        dateCreation: Date;
        dateMaladie: Date;
        totalPec: number;
        observationGlobal: string;
        montant: number | null;
        ocrText: string | null;
        numBs: string;
        codeAssure: string;
        nomAssure: string;
        nomBeneficiaire: string;
        nomSociete: string;
        etat: string;
        matricule: string | null;
        dateSoin: Date | null;
        acte: string | null;
        processedById: string | null;
        dueDate: Date | null;
        virementId: string | null;
        deletedAt: Date | null;
    }>;
    updateBS(bsId: string, updateBSDto: UpdateBulletinSoinDto): Promise<{
        owner: {
            password: string;
            id: string;
            email: string;
            fullName: string;
            role: string;
            department: string | null;
            active: boolean;
            createdAt: Date;
        } | null;
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        priority: number;
        bordereauId: string;
        ownerId: string | null;
        processedAt: Date | null;
        nomPrestation: string;
        nomBordereau: string;
        lien: string;
        dateCreation: Date;
        dateMaladie: Date;
        totalPec: number;
        observationGlobal: string;
        montant: number | null;
        ocrText: string | null;
        numBs: string;
        codeAssure: string;
        nomAssure: string;
        nomBeneficiaire: string;
        nomSociete: string;
        etat: string;
        matricule: string | null;
        dateSoin: Date | null;
        acte: string | null;
        processedById: string | null;
        dueDate: Date | null;
        virementId: string | null;
        deletedAt: Date | null;
    }>;
    getDocuments(id: string): Promise<{
        id: string;
        name: string;
        bordereauId: string | null;
        type: string;
        status: import(".prisma/client").$Enums.DocumentStatus | null;
        uploadedById: string;
        path: string;
        uploadedAt: Date;
        ocrResult: import("@prisma/client/runtime/library").JsonValue | null;
        hash: string | null;
        ocrText: string | null;
    }[]>;
    uploadDocument(id: string, file: Express.Multer.File, documentData: any): Promise<{
        id: string;
        name: string;
        bordereauId: string | null;
        type: string;
        status: import(".prisma/client").$Enums.DocumentStatus | null;
        uploadedById: string;
        path: string;
        uploadedAt: Date;
        ocrResult: import("@prisma/client/runtime/library").JsonValue | null;
        hash: string | null;
        ocrText: string | null;
    }>;
    updateBordereauStatus(id: string): Promise<void>;
    getVirement(id: string): Promise<{
        id: string;
        createdAt: Date;
        priority: number;
        bordereauId: string;
        montant: number;
        referenceBancaire: string;
        dateDepot: Date;
        dateExecution: Date;
        confirmed: boolean;
        confirmedById: string | null;
        confirmedAt: Date | null;
    } | null>;
    getAlerts(id: string): Promise<{
        id: string;
        createdAt: Date;
        documentId: string | null;
        bordereauId: string | null;
        userId: string | null;
        alertType: string;
        alertLevel: string;
        message: string;
        notifiedRoles: string[];
        resolved: boolean;
        resolvedAt: Date | null;
    }[]>;
    forecastBordereaux(days?: string): Promise<{
        forecast: number;
        dailyAverage: number;
    }>;
    estimateStaffing(days?: string, avg?: string): Promise<{
        forecast: number;
        staffNeeded: number;
    }>;
    seedTestData(): Promise<any>;
    seedComplaints(): Promise<any>;
    analyzeComplaintsAI(): Promise<{
        message: string;
        analysis?: any;
    }>;
    getAIRecommendations(): Promise<{
        message: string;
        recommendations?: any[];
    }>;
    analyzeReclamationsAI(): Promise<any>;
    getReclamationSuggestions(id: string): Promise<any>;
    getTeamRecommendations(): Promise<any>;
    getPredictResourcesAI(payload: any): Promise<any>;
    searchBordereauxAndDocuments(query: string): Promise<any[]>;
}
